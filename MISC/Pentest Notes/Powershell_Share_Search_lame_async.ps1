# https://github.com/SnaffCon/Snaffler

# Configuration
$pathsFile = ".\snaffler.smb.paths.txt"
$extensions = @("*.kdbx", "*.ps1", "*.xlsx")
$maxThreads = 20
$outputDir = "C:\ROBERT\search_results"
$finalOutputFile = "C:\ROBERT\combined_results.txt"

# Create output directory
if (!(Test-Path $outputDir)) {
    New-Item -ItemType Directory -Path $outputDir -Force
}

# Read network paths
$networkPaths = Get-Content $pathsFile | Where-Object { $_ -and $_.Trim() }

Write-Host "Starting search across $($networkPaths.Count) network paths with $maxThreads threads..."

# Script block for each thread
$searchScriptBlock = {
    param($Path, $Extensions, $ThreadId, $OutputDir)

    $results = @()
    $threadOutputFile = Join-Path $OutputDir "thread_$ThreadId.txt"

    try {
        Write-Host "[Thread $ThreadId] Searching: $Path" -ForegroundColor Cyan

        foreach ($ext in $Extensions) {
            try {
                $files = Get-ChildItem -Path $Path -Filter $ext -Recurse -File -ErrorAction SilentlyContinue
                foreach ($file in $files) {
                    $result = "$($file.FullName) | Size: $($file.Length) bytes | Modified: $($file.LastWriteTime)"
                    $results += $result

                    # Write to thread-specific file immediately
                    Add-Content -Path $threadOutputFile -Value $result
                    Write-Host "[Thread $ThreadId] Found: $($file.FullName)" -ForegroundColor Green
                }
            }
            catch {
                $errorMsg = "[Thread $ThreadId] Error searching $Path with $ext : $($_.Exception.Message)"
                Add-Content -Path $threadOutputFile -Value $errorMsg
                Write-Host $errorMsg -ForegroundColor Red
            }
        }

        Write-Host "[Thread $ThreadId] Completed: $Path - Found $($results.Count) files" -ForegroundColor Yellow
    }
    catch {
        $errorMsg = "[Thread $ThreadId] Critical error for $Path : $($_.Exception.Message)"
        Add-Content -Path $threadOutputFile -Value $errorMsg
        Write-Host $errorMsg -ForegroundColor Red
    }
}

# Create and start jobs with throttling
$jobs = @()
$pathIndex = 0

foreach ($path in $networkPaths) {
    # Wait if we've reached max threads
    while ((Get-Job -State Running).Count -ge $maxThreads) {
        Start-Sleep -Milliseconds 100

        # Clean up completed jobs
        Get-Job -State Completed | ForEach-Object {
            Remove-Job $_
        }
    }

    # Start new job
    $job = Start-Job -ScriptBlock $searchScriptBlock -ArgumentList $path, $extensions, $pathIndex, $outputDir
    $jobs += $job
    $pathIndex++

    Write-Host "Started job for path: $path (Job ID: $($job.Id))" -ForegroundColor Blue
}

# Wait for all jobs to complete
Write-Host "Waiting for all jobs to complete..." -ForegroundColor Magenta
$jobs | Wait-Job | Out-Null

# Clean up jobs
$jobs | Remove-Job

Write-Host "All searches completed. Combining results..." -ForegroundColor Magenta

# Combine all thread results
$allResults = @()
$threadFiles = Get-ChildItem -Path $outputDir -Filter "thread_*.txt"

foreach ($threadFile in $threadFiles) {
    if (Test-Path $threadFile.FullName) {
        $threadResults = Get-Content $threadFile.FullName
        $allResults += $threadResults
        Write-Host "Processed $($threadResults.Count) results from $($threadFile.Name)" -ForegroundColor Cyan
    }
}

# Write combined results
$allResults | Out-File -FilePath $finalOutputFile -Encoding UTF8

# Summary
Write-Host "`n=== SEARCH COMPLETE ===" -ForegroundColor Green
Write-Host "Total files found: $($allResults.Count)" -ForegroundColor Green
Write-Host "Individual thread results: $outputDir" -ForegroundColor Green
Write-Host "Combined results file: $finalOutputFile" -ForegroundColor Green
Write-Host "Thread files can be deleted if no longer needed." -ForegroundColor Yellow

# Optional: Clean up thread files
$cleanup = Read-Host "Delete individual thread files? (y/N)"
if ($cleanup -eq 'y' -or $cleanup -eq 'Y') {
    Remove-Item -Path "$outputDir\thread_*.txt" -Force
    Write-Host "Thread files cleaned up." -ForegroundColor Green
}
